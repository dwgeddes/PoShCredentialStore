TOPIC
    about_PoShCredentialStore

SHORT DESCRIPTION
    Describes the PoShCredentialStore module for cross-platform credential management.

LONG DESCRIPTION
    The PoShCredentialStore module provides a unified interface for securely storing
    and retrieving credentials using native credential stores.

    The module currently supports:
    - macOS: Keychain Services (via security command)

    Additional platforms are planned for future releases.

    All credentials are stored using platform-native security mechanisms, ensuring
    that sensitive information is protected according to operating system standards.

SUPPORTED PLATFORMS
    - macOS 10.15+ (Catalina)
        Uses the built-in 'security' command to interact with Keychain Services.
        Credentials are stored in the user's keychain and may require keychain
        unlock for access.

    Additional platforms are planned for future releases.

MAIN FUNCTIONS
    Get-StoredCredential
        Retrieves stored credentials from the credential store.

    Set-StoredCredential
        Updates existing credentials in the credential store.

    New-StoredCredential
        Creates new credentials in the credential store.

    Remove-StoredCredential
        Removes credentials from the credential store.

    Test-StoredCredential
        Tests whether a credential exists in the credential store.

    Get-CredentialStoreInfo
        Gets information about the current platform and storage capabilities.

COMPATIBILITY ALIASES
    For backward compatibility, the following alias functions are available:
    - Get-PoShCredential (alias for Get-StoredCredential)
    - Set-PoShCredential (alias for Set-StoredCredential)
    - Remove-PoShCredential (alias for Remove-StoredCredential)

SECURITY CONSIDERATIONS
    - Credentials are stored using platform-native security mechanisms
    - Memory cleanup is performed after sensitive operations
    - Input validation prevents malformed credential names
    - Platform-specific security features are leveraged
    - No credentials are logged or written to disk in plain text

BASIC USAGE EXAMPLE
    # Store a credential
    $cred = Get-Credential -Message "Enter service credentials"
    New-StoredCredential -Name "MyService" -Credential $cred

    # Retrieve a credential
    $storedCred = Get-StoredCredential -Name "MyService"

    # Use the credential
    if ($storedCred) {
        Invoke-RestMethod -Uri "https://api.service.com" -Credential $storedCred
    }

    # Remove a credential
    Remove-StoredCredential -Name "MyService" -Force

PIPELINE SUPPORT
    All functions support pipeline operations for batch credential management:

    # Check multiple services
    "Service1", "Service2", "Service3" | ForEach-Object {
        $cred = Get-StoredCredential -Name $_
        Write-Host "$_: $(if($cred){'Found'}else{'Missing'})"
    }

REQUIREMENTS
    - PowerShell 7.0 or later
    - macOS: security command (built-in)

TROUBLESHOOTING
    Common issues and solutions:

    macOS: Keychain access denied
    - Unlock keychain manually: security unlock-keychain
    - Check keychain permissions in Keychain Access app
    - Verify security command: which security

    General: Credential not found
    - Verify credential name spelling (case-sensitive)
    - Check platform support: Get-CredentialStoreInfo
    - Ensure credential was stored with same user account

    For detailed help on any function:
    Get-Help <FunctionName> -Full

SEE ALSO
    Get-StoredCredential
    Set-StoredCredential
    New-StoredCredential
    Remove-StoredCredential
    Test-StoredCredential
    Get-CredentialStoreInfo

KEYWORDS
    Credential, Security, CrossPlatform, Keychain, CredentialManager, macOS, Windows
